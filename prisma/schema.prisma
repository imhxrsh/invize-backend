// Prisma schema for MongoDB using Prisma Client Python

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-py"
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  passwordHash String
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  roles        String[]
  permissions  String[]
  tokenVersion Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  fullName     String?
  avatarUrl    String?
  phone        String?
  locale       String?
  timeZone     String?
  lastLoginAt  DateTime?
  orgId        String?  @db.ObjectId

  sessions      Session[]
  refreshTokens RefreshToken[]
  org           Org?      @relation(fields: [orgId], references: [id])
  preferences   UserPreferences?
  securityEvents SecurityEvent[]
}

model Session {
  sessionId     String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  userAgent     String?
  ip            String?
  createdAt     DateTime       @default(now())
  lastUsed      DateTime       @default(now())
  revoked       Boolean        @default(false)
  revokedAt     DateTime?
  refreshTokens RefreshToken[]
}

model RefreshToken {
  tokenId           String    @id @default(auto()) @map("_id") @db.ObjectId
  session           Session   @relation(fields: [sessionId], references: [sessionId])
  sessionId         String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @db.ObjectId
  tokenHash         String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime
  revoked           Boolean   @default(false)
  revokedAt         DateTime?
  replacedByTokenId String?
  reuseDetected     Boolean   @default(false)

  @@index([userId])
  @@index([sessionId])
}

model Org {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logoUrl  String?
  domains  String[]

  users    User[]
}

model UserPreferences {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @unique @db.ObjectId
  theme              String  @default("system")
  locale             String?
  timeZone           String?
  density            String  @default("comfortable")
  notificationsEmail Boolean @default(true)
  notificationsPush  Boolean @default(false)

  user               User    @relation(fields: [userId], references: [id])
}

model SecurityEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String?
  createdAt DateTime @default(now())

  @@index([userId])
}
